// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"newsapi/internal/usecases/news/create_news"

	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForCreateNews creates a new instance of UsecasesForCreateNews. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForCreateNews(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForCreateNews {
	mock := &UsecasesForCreateNews{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForCreateNews is an autogenerated mock type for the UsecasesForCreateNews type
type UsecasesForCreateNews struct {
	mock.Mock
}

type UsecasesForCreateNews_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForCreateNews) EXPECT() *UsecasesForCreateNews_Expecter {
	return &UsecasesForCreateNews_Expecter{mock: &_m.Mock}
}

// CreateNews provides a mock function for the type UsecasesForCreateNews
func (_mock *UsecasesForCreateNews) CreateNews(in createNews.In) (createNews.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for CreateNews")
	}

	var r0 createNews.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(createNews.In) (createNews.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(createNews.In) createNews.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(createNews.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(createNews.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForCreateNews_CreateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNews'
type UsecasesForCreateNews_CreateNews_Call struct {
	*mock.Call
}

// CreateNews is a helper method to define mock.On call
//   - in createNews.In
func (_e *UsecasesForCreateNews_Expecter) CreateNews(in interface{}) *UsecasesForCreateNews_CreateNews_Call {
	return &UsecasesForCreateNews_CreateNews_Call{Call: _e.mock.On("CreateNews", in)}
}

func (_c *UsecasesForCreateNews_CreateNews_Call) Run(run func(in createNews.In)) *UsecasesForCreateNews_CreateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 createNews.In
		if args[0] != nil {
			arg0 = args[0].(createNews.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForCreateNews_CreateNews_Call) Return(out createNews.Out, err error) *UsecasesForCreateNews_CreateNews_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForCreateNews_CreateNews_Call) RunAndReturn(run func(in createNews.In) (createNews.Out, error)) *UsecasesForCreateNews_CreateNews_Call {
	_c.Call.Return(run)
	return _c
}
