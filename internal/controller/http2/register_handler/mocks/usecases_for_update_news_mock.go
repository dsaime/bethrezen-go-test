// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockRegisterHandler

import (
	"newsapi/internal/usecases/news/update_news"

	mock "github.com/stretchr/testify/mock"
)

// NewUsecasesForUpdateNews creates a new instance of UsecasesForUpdateNews. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecasesForUpdateNews(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsecasesForUpdateNews {
	mock := &UsecasesForUpdateNews{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UsecasesForUpdateNews is an autogenerated mock type for the UsecasesForUpdateNews type
type UsecasesForUpdateNews struct {
	mock.Mock
}

type UsecasesForUpdateNews_Expecter struct {
	mock *mock.Mock
}

func (_m *UsecasesForUpdateNews) EXPECT() *UsecasesForUpdateNews_Expecter {
	return &UsecasesForUpdateNews_Expecter{mock: &_m.Mock}
}

// UpdateNews provides a mock function for the type UsecasesForUpdateNews
func (_mock *UsecasesForUpdateNews) UpdateNews(in updateNews.In) (updateNews.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNews")
	}

	var r0 updateNews.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(updateNews.In) (updateNews.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(updateNews.In) updateNews.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(updateNews.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(updateNews.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UsecasesForUpdateNews_UpdateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNews'
type UsecasesForUpdateNews_UpdateNews_Call struct {
	*mock.Call
}

// UpdateNews is a helper method to define mock.On call
//   - in updateNews.In
func (_e *UsecasesForUpdateNews_Expecter) UpdateNews(in interface{}) *UsecasesForUpdateNews_UpdateNews_Call {
	return &UsecasesForUpdateNews_UpdateNews_Call{Call: _e.mock.On("UpdateNews", in)}
}

func (_c *UsecasesForUpdateNews_UpdateNews_Call) Run(run func(in updateNews.In)) *UsecasesForUpdateNews_UpdateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 updateNews.In
		if args[0] != nil {
			arg0 = args[0].(updateNews.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *UsecasesForUpdateNews_UpdateNews_Call) Return(out updateNews.Out, err error) *UsecasesForUpdateNews_UpdateNews_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *UsecasesForUpdateNews_UpdateNews_Call) RunAndReturn(run func(in updateNews.In) (updateNews.Out, error)) *UsecasesForUpdateNews_UpdateNews_Call {
	_c.Call.Return(run)
	return _c
}
