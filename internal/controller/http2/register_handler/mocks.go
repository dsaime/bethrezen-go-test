// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package registerHandler

import (
	"newsapi/internal/usecases/news/create_news"
	"newsapi/internal/usecases/news/news_list"
	"newsapi/internal/usecases/news/update_news"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUsecasesForCreateNews creates a new instance of MockUsecasesForCreateNews. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecasesForCreateNews(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecasesForCreateNews {
	mock := &MockUsecasesForCreateNews{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsecasesForCreateNews is an autogenerated mock type for the UsecasesForCreateNews type
type MockUsecasesForCreateNews struct {
	mock.Mock
}

type MockUsecasesForCreateNews_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecasesForCreateNews) EXPECT() *MockUsecasesForCreateNews_Expecter {
	return &MockUsecasesForCreateNews_Expecter{mock: &_m.Mock}
}

// CreateNews provides a mock function for the type MockUsecasesForCreateNews
func (_mock *MockUsecasesForCreateNews) CreateNews(in createNews.In) (createNews.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for CreateNews")
	}

	var r0 createNews.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(createNews.In) (createNews.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(createNews.In) createNews.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(createNews.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(createNews.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecasesForCreateNews_CreateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNews'
type MockUsecasesForCreateNews_CreateNews_Call struct {
	*mock.Call
}

// CreateNews is a helper method to define mock.On call
//   - in createNews.In
func (_e *MockUsecasesForCreateNews_Expecter) CreateNews(in interface{}) *MockUsecasesForCreateNews_CreateNews_Call {
	return &MockUsecasesForCreateNews_CreateNews_Call{Call: _e.mock.On("CreateNews", in)}
}

func (_c *MockUsecasesForCreateNews_CreateNews_Call) Run(run func(in createNews.In)) *MockUsecasesForCreateNews_CreateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 createNews.In
		if args[0] != nil {
			arg0 = args[0].(createNews.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUsecasesForCreateNews_CreateNews_Call) Return(out createNews.Out, err error) *MockUsecasesForCreateNews_CreateNews_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *MockUsecasesForCreateNews_CreateNews_Call) RunAndReturn(run func(in createNews.In) (createNews.Out, error)) *MockUsecasesForCreateNews_CreateNews_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecasesForUpdateNews creates a new instance of MockUsecasesForUpdateNews. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecasesForUpdateNews(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecasesForUpdateNews {
	mock := &MockUsecasesForUpdateNews{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsecasesForUpdateNews is an autogenerated mock type for the UsecasesForUpdateNews type
type MockUsecasesForUpdateNews struct {
	mock.Mock
}

type MockUsecasesForUpdateNews_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecasesForUpdateNews) EXPECT() *MockUsecasesForUpdateNews_Expecter {
	return &MockUsecasesForUpdateNews_Expecter{mock: &_m.Mock}
}

// UpdateNews provides a mock function for the type MockUsecasesForUpdateNews
func (_mock *MockUsecasesForUpdateNews) UpdateNews(in updateNews.In) (updateNews.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNews")
	}

	var r0 updateNews.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(updateNews.In) (updateNews.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(updateNews.In) updateNews.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(updateNews.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(updateNews.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecasesForUpdateNews_UpdateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNews'
type MockUsecasesForUpdateNews_UpdateNews_Call struct {
	*mock.Call
}

// UpdateNews is a helper method to define mock.On call
//   - in updateNews.In
func (_e *MockUsecasesForUpdateNews_Expecter) UpdateNews(in interface{}) *MockUsecasesForUpdateNews_UpdateNews_Call {
	return &MockUsecasesForUpdateNews_UpdateNews_Call{Call: _e.mock.On("UpdateNews", in)}
}

func (_c *MockUsecasesForUpdateNews_UpdateNews_Call) Run(run func(in updateNews.In)) *MockUsecasesForUpdateNews_UpdateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 updateNews.In
		if args[0] != nil {
			arg0 = args[0].(updateNews.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUsecasesForUpdateNews_UpdateNews_Call) Return(out updateNews.Out, err error) *MockUsecasesForUpdateNews_UpdateNews_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *MockUsecasesForUpdateNews_UpdateNews_Call) RunAndReturn(run func(in updateNews.In) (updateNews.Out, error)) *MockUsecasesForUpdateNews_UpdateNews_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecasesForNewsList creates a new instance of MockUsecasesForNewsList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecasesForNewsList(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecasesForNewsList {
	mock := &MockUsecasesForNewsList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsecasesForNewsList is an autogenerated mock type for the UsecasesForNewsList type
type MockUsecasesForNewsList struct {
	mock.Mock
}

type MockUsecasesForNewsList_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecasesForNewsList) EXPECT() *MockUsecasesForNewsList_Expecter {
	return &MockUsecasesForNewsList_Expecter{mock: &_m.Mock}
}

// NewsList provides a mock function for the type MockUsecasesForNewsList
func (_mock *MockUsecasesForNewsList) NewsList(in newsList.In) (newsList.Out, error) {
	ret := _mock.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for NewsList")
	}

	var r0 newsList.Out
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(newsList.In) (newsList.Out, error)); ok {
		return returnFunc(in)
	}
	if returnFunc, ok := ret.Get(0).(func(newsList.In) newsList.Out); ok {
		r0 = returnFunc(in)
	} else {
		r0 = ret.Get(0).(newsList.Out)
	}
	if returnFunc, ok := ret.Get(1).(func(newsList.In) error); ok {
		r1 = returnFunc(in)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecasesForNewsList_NewsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewsList'
type MockUsecasesForNewsList_NewsList_Call struct {
	*mock.Call
}

// NewsList is a helper method to define mock.On call
//   - in newsList.In
func (_e *MockUsecasesForNewsList_Expecter) NewsList(in interface{}) *MockUsecasesForNewsList_NewsList_Call {
	return &MockUsecasesForNewsList_NewsList_Call{Call: _e.mock.On("NewsList", in)}
}

func (_c *MockUsecasesForNewsList_NewsList_Call) Run(run func(in newsList.In)) *MockUsecasesForNewsList_NewsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 newsList.In
		if args[0] != nil {
			arg0 = args[0].(newsList.In)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUsecasesForNewsList_NewsList_Call) Return(out newsList.Out, err error) *MockUsecasesForNewsList_NewsList_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *MockUsecasesForNewsList_NewsList_Call) RunAndReturn(run func(in newsList.In) (newsList.Out, error)) *MockUsecasesForNewsList_NewsList_Call {
	_c.Call.Return(run)
	return _c
}
