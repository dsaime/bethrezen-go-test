// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package middleware

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthTokenVerifier creates a new instance of MockAuthTokenVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthTokenVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthTokenVerifier {
	mock := &MockAuthTokenVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthTokenVerifier is an autogenerated mock type for the AuthTokenVerifier type
type MockAuthTokenVerifier struct {
	mock.Mock
}

type MockAuthTokenVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthTokenVerifier) EXPECT() *MockAuthTokenVerifier_Expecter {
	return &MockAuthTokenVerifier_Expecter{mock: &_m.Mock}
}

// VerifyAuthToken provides a mock function for the type MockAuthTokenVerifier
func (_mock *MockAuthTokenVerifier) VerifyAuthToken(token string) bool {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAuthToken")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockAuthTokenVerifier_VerifyAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAuthToken'
type MockAuthTokenVerifier_VerifyAuthToken_Call struct {
	*mock.Call
}

// VerifyAuthToken is a helper method to define mock.On call
//   - token string
func (_e *MockAuthTokenVerifier_Expecter) VerifyAuthToken(token interface{}) *MockAuthTokenVerifier_VerifyAuthToken_Call {
	return &MockAuthTokenVerifier_VerifyAuthToken_Call{Call: _e.mock.On("VerifyAuthToken", token)}
}

func (_c *MockAuthTokenVerifier_VerifyAuthToken_Call) Run(run func(token string)) *MockAuthTokenVerifier_VerifyAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthTokenVerifier_VerifyAuthToken_Call) Return(b bool) *MockAuthTokenVerifier_VerifyAuthToken_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockAuthTokenVerifier_VerifyAuthToken_Call) RunAndReturn(run func(token string) bool) *MockAuthTokenVerifier_VerifyAuthToken_Call {
	_c.Call.Return(run)
	return _c
}
