// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package newsAgr

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockRepository
func (_mock *MockRepository) Find(filter Filter) (News, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 News
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Filter) (News, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(Filter) News); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(News)
	}
	if returnFunc, ok := ret.Get(1).(func(Filter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - filter Filter
func (_e *MockRepository_Expecter) Find(filter interface{}) *MockRepository_Find_Call {
	return &MockRepository_Find_Call{Call: _e.mock.On("Find", filter)}
}

func (_c *MockRepository_Find_Call) Run(run func(filter Filter)) *MockRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Filter
		if args[0] != nil {
			arg0 = args[0].(Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Find_Call) Return(news News, err error) *MockRepository_Find_Call {
	_c.Call.Return(news, err)
	return _c
}

func (_c *MockRepository_Find_Call) RunAndReturn(run func(filter Filter) (News, error)) *MockRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// InTransaction provides a mock function for the type MockRepository
func (_mock *MockRepository) InTransaction(fn func(txRepo Repository) error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for InTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func(txRepo Repository) error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_InTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InTransaction'
type MockRepository_InTransaction_Call struct {
	*mock.Call
}

// InTransaction is a helper method to define mock.On call
//   - fn func(txRepo Repository) error
func (_e *MockRepository_Expecter) InTransaction(fn interface{}) *MockRepository_InTransaction_Call {
	return &MockRepository_InTransaction_Call{Call: _e.mock.On("InTransaction", fn)}
}

func (_c *MockRepository_InTransaction_Call) Run(run func(fn func(txRepo Repository) error)) *MockRepository_InTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func(txRepo Repository) error
		if args[0] != nil {
			arg0 = args[0].(func(txRepo Repository) error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_InTransaction_Call) Return(err error) *MockRepository_InTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_InTransaction_Call) RunAndReturn(run func(fn func(txRepo Repository) error) error) *MockRepository_InTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepository
func (_mock *MockRepository) List(filter Filter) ([]News, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []News
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Filter) ([]News, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(Filter) []News); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]News)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(Filter) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter Filter
func (_e *MockRepository_Expecter) List(filter interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *MockRepository_List_Call) Run(run func(filter Filter)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Filter
		if args[0] != nil {
			arg0 = args[0].(Filter)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(newss []News, err error) *MockRepository_List_Call {
	_c.Call.Return(newss, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(filter Filter) ([]News, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function for the type MockRepository
func (_mock *MockRepository) Upsert(news News) (int, error) {
	ret := _mock.Called(news)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(News) (int, error)); ok {
		return returnFunc(news)
	}
	if returnFunc, ok := ret.Get(0).(func(News) int); ok {
		r0 = returnFunc(news)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(News) error); ok {
		r1 = returnFunc(news)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - news News
func (_e *MockRepository_Expecter) Upsert(news interface{}) *MockRepository_Upsert_Call {
	return &MockRepository_Upsert_Call{Call: _e.mock.On("Upsert", news)}
}

func (_c *MockRepository_Upsert_Call) Run(run func(news News)) *MockRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 News
		if args[0] != nil {
			arg0 = args[0].(News)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_Upsert_Call) Return(id int, err error) *MockRepository_Upsert_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockRepository_Upsert_Call) RunAndReturn(run func(news News) (int, error)) *MockRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}
